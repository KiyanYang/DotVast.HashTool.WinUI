name: Build MSIX

on:
  push:
    branches: [main]
    paths-ignore:
      - "Assets/**"
      - ".*"
      - "*.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "Assets/**"
      - ".*"
      - "*.md"
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]

    runs-on:
      # For a list of available runner types, refer to https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
      windows-latest

    env:
      DotVast_SolutionName: DotVast.HashTool.WinUI
      DotVast_PfxName: GitHubActionsWorkflow.pfx
      DotVast_PfxThumbprint: A87830CE7AA286884D04D11E8FA020CB5A1097C5
      DotVast_AppxmanifestName: Package.appxmanifest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Used in `Update appxmanifest version`

      # Install the .NET Core workload: https://github.com/actions/setup-dotnet
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1

      - name: Update appxmanifest version
        run: |
          $appxmanifestPath = Convert-Path .\$env:DotVast_SolutionName\$env:DotVast_AppxmanifestName
          [xml]$appxmanifest = Get-Content $appxmanifestPath
          $gitCountFromLatestTag = git rev-list --count "$(git describe --tag --abbrev=0)..HEAD"
          $newVersion = $appxmanifest.Package.Identity.Version -replace ('^(\d+\.\d+\.\d+)\.\d+$', "`$1.$gitCountFromLatestTag")
          $appxmanifest.Package.Identity.Version = $newVersion
          $appxmanifest.Save($appxmanifestPath)

      # Import the base 64 encoded pfx
      - name: Import the pfx
        run: |
          $pfxCertBytes = [System.Convert]::FromBase64String('${{ secrets.BASE64_ENCODED_PFX }}')
          Set-Content -Path $env:DotVast_PfxName -Value $pfxCertBytes -AsByteStream
          $password = ConvertTo-SecureString -String '${{ secrets.PFX_PASSWORD }}' -AsPlainText
          Import-PfxCertificate -FilePath $env:DotVast_PfxName -CertStoreLocation Cert:\CurrentUser\My -Password $password
          Remove-Variable -Name password

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      # https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#restoring-packagereference-and-packagesconfig-projects-with-msbuild
      - name: Restore the application
        run: |
          msbuild "$env:DotVast_SolutionName.sln" `
            -t:Restore `
            -p:RestorePackagesConfig=true `
            -p:Configuration=${{ matrix.configuration }}

      # Create the app package by building and packaging the project
      - name: Create the app package
        run: |
          msbuild "$env:DotVast_SolutionName.sln" `
            -p:Configuration=${{ matrix.configuration }} `
            -p:Platform=${{ matrix.platform }} `
            -p:AppxBundle=Never `
            -p:UapAppxPackageBuildMode=SideloadOnly `
            -p:AppxPackageDir='Packages/${{ matrix.platform }}/' `
            -p:GenerateAppxPackageOnBuild=true

      # Remove the pfx
      - name: Remove the pfx
        run: |
          Remove-Item -Path $env:DotVast_PfxName
          Remove-Item -Path Cert:\CurrentUser\My\$env:DotVast_PfxThumbprint

      - name: Remove unnecessary dependencies and set MSIX package name
        run: |
          $msixFolder = (Get-ChildItem "$env:DotVast_SolutionName/Packages/${{ matrix.platform }}")[0]
          $msixFullName = $msixFolder.FullName
          $msixName = $msixFolder.Name
          Get-ChildItem "$msixFullName/Dependencies" | Where-Object Name -NotLike ${{ matrix.platform }} | Remove-Item -Recurse
          $gitDatetime = Get-Date -UnixTimeSeconds (git show -s --format=%ct HEAD) -Format 'yyMMdd'
          $gitShortHash = git show -s --format=%h HEAD
          $newMsixName = "$msixName-$gitDatetime-$gitShortHash"
          "DotVast_PackageName=$newMsixName" >> $env:GITHUB_ENV
          Rename-Item -Path $msixFullName -NewName $newMsixName

      # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload MSIX package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DotVast_PackageName }}
          path: ${{ env.DotVast_SolutionName }}/Packages/${{ matrix.platform }}
