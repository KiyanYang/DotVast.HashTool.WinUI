// <auto-generated/>

#if Benchmark || sm3

using DotVast.Hashing;

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace DotVast.HashTool.NativeCrypto;

public sealed partial class SM3 : IHasher
{
    private sealed class SM3Handle : HasherHandle
    {
        protected override void Free() => sm3_free(handle);
    }

    private readonly SM3Handle _handle = sm3_new();

    public int HashLengthInBytes => 32;

    public void Reset() => sm3_reset(_handle);

    public void Append(ReadOnlySpan<byte> source) => sm3_update(_handle, source, source.Length);

    public byte[] GetCurrentHash()
    {
        var ret = new byte[32];
        sm3_finalize(_handle, ret, 32);
        return ret;
    }

    [LibraryImport("native_crypto", EntryPoint = "sm3_new")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial SM3Handle sm3_new();

    [LibraryImport("native_crypto", EntryPoint = "sm3_reset")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sm3_reset(SM3Handle hasherHandle);

    [LibraryImport("native_crypto", EntryPoint = "sm3_update")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sm3_update(SM3Handle hasherHandle, ReadOnlySpan<byte> input, int size);

    [LibraryImport("native_crypto", EntryPoint = "sm3_finalize")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sm3_finalize(SM3Handle hasherHandle, Span<byte> output, int size);

    [LibraryImport("native_crypto", EntryPoint = "sm3_free")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sm3_free(nint hasherPtr);
}

#endif
