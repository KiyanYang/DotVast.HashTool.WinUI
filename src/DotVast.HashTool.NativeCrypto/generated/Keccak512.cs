// <auto-generated/>

#if Benchmark || sha3

using DotVast.Hashing;

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace DotVast.HashTool.NativeCrypto;

public sealed partial class Keccak512 : IHasher
{
    private sealed class Keccak512Handle : HasherHandle
    {
        protected override void Free() => Keccak512_free(handle);
    }

    private readonly Keccak512Handle _handle = Keccak512_new();

    public int HashLengthInBytes => 64;

    public void Reset() => Keccak512_reset(_handle);

    public void Append(ReadOnlySpan<byte> source) => Keccak512_update(_handle, source, source.Length);

    public byte[] GetCurrentHash()
    {
        var ret = new byte[64];
        Keccak512_finalize(_handle, ret, 64);
        return ret;
    }

    [LibraryImport("native_crypto", EntryPoint = "Keccak512_new")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial Keccak512Handle Keccak512_new();

    [LibraryImport("native_crypto", EntryPoint = "Keccak512_reset")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void Keccak512_reset(Keccak512Handle hasherHandle);

    [LibraryImport("native_crypto", EntryPoint = "Keccak512_update")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void Keccak512_update(Keccak512Handle hasherHandle, ReadOnlySpan<byte> input, int size);

    [LibraryImport("native_crypto", EntryPoint = "Keccak512_finalize")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void Keccak512_finalize(Keccak512Handle hasherHandle, Span<byte> output, int size);

    [LibraryImport("native_crypto", EntryPoint = "Keccak512_free")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void Keccak512_free(nint hasherPtr);
}

#endif
