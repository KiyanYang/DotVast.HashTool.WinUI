// <auto-generated/>

#if Benchmark || sha2

using DotVast.Hashing;

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace DotVast.HashTool.NativeCrypto;

public sealed partial class SHA224 : IHasher
{
    private sealed class SHA224Handle : HasherHandle
    {
        protected override void Free() => sha224_free(handle);
    }

    private readonly SHA224Handle _handle = sha224_new();

    public int HashLengthInBytes => 28;

    public void Reset() => sha224_reset(_handle);

    public void Append(ReadOnlySpan<byte> source) => sha224_update(_handle, source, source.Length);

    public byte[] GetCurrentHash()
    {
        var ret = new byte[28];
        sha224_finalize(_handle, ret, 28);
        return ret;
    }

    [LibraryImport("native_crypto", EntryPoint = "sha224_new")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial SHA224Handle sha224_new();

    [LibraryImport("native_crypto", EntryPoint = "sha224_reset")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha224_reset(SHA224Handle hasherHandle);

    [LibraryImport("native_crypto", EntryPoint = "sha224_update")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha224_update(SHA224Handle hasherHandle, ReadOnlySpan<byte> input, int size);

    [LibraryImport("native_crypto", EntryPoint = "sha224_finalize")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha224_finalize(SHA224Handle hasherHandle, Span<byte> output, int size);

    [LibraryImport("native_crypto", EntryPoint = "sha224_free")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha224_free(nint hasherPtr);
}

#endif
