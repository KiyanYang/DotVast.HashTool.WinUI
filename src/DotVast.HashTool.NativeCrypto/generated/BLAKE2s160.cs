// <auto-generated/>

#if Benchmark || blake2

using DotVast.Hashing;

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace DotVast.HashTool.NativeCrypto;

public sealed partial class BLAKE2s160 : IHasher
{
    private sealed class BLAKE2s160Handle : HasherHandle
    {
        protected override void Free() => blake2s160_free(handle);
    }

    private readonly BLAKE2s160Handle _handle = blake2s160_new();

    public int HashLengthInBytes => 20;

    public void Reset() => blake2s160_reset(_handle);

    public void Append(ReadOnlySpan<byte> source) => blake2s160_update(_handle, source, source.Length);

    public byte[] Finalize()
    {
        var ret = new byte[20];
        blake2s160_finalize(_handle, ret, 20);
        return ret;
    }

    [LibraryImport("native_crypto", EntryPoint = "blake2s160_new")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial BLAKE2s160Handle blake2s160_new();

    [LibraryImport("native_crypto", EntryPoint = "blake2s160_reset")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void blake2s160_reset(BLAKE2s160Handle hasherHandle);

    [LibraryImport("native_crypto", EntryPoint = "blake2s160_update")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void blake2s160_update(BLAKE2s160Handle hasherHandle, ReadOnlySpan<byte> input, int size);

    [LibraryImport("native_crypto", EntryPoint = "blake2s160_finalize")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void blake2s160_finalize(BLAKE2s160Handle hasherHandle, Span<byte> output, int size);

    [LibraryImport("native_crypto", EntryPoint = "blake2s160_free")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void blake2s160_free(nint hasherPtr);
}

#endif
