// <auto-generated/>

#if Benchmark || sha3

using DotVast.Hashing;

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace DotVast.HashTool.NativeCrypto;

public sealed partial class SHA3_384 : IHasher
{
    private sealed class SHA3_384Handle : HasherHandle
    {
        protected override void Free() => sha3_384_free(handle);
    }

    private readonly SHA3_384Handle _handle = sha3_384_new();

    public int HashLengthInBytes => 48;

    public void Reset() => sha3_384_reset(_handle);

    public void Append(ReadOnlySpan<byte> source) => sha3_384_update(_handle, source, source.Length);

    public byte[] GetCurrentHash()
    {
        var ret = new byte[48];
        sha3_384_finalize(_handle, ret, 48);
        return ret;
    }

    [LibraryImport("native_crypto", EntryPoint = "sha3_384_new")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial SHA3_384Handle sha3_384_new();

    [LibraryImport("native_crypto", EntryPoint = "sha3_384_reset")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha3_384_reset(SHA3_384Handle hasherHandle);

    [LibraryImport("native_crypto", EntryPoint = "sha3_384_update")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha3_384_update(SHA3_384Handle hasherHandle, ReadOnlySpan<byte> input, int size);

    [LibraryImport("native_crypto", EntryPoint = "sha3_384_finalize")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha3_384_finalize(SHA3_384Handle hasherHandle, Span<byte> output, int size);

    [LibraryImport("native_crypto", EntryPoint = "sha3_384_free")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha3_384_free(nint hasherPtr);
}

#endif
