// <auto-generated/>

#if Benchmark || blake2

using DotVast.Hashing;

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace DotVast.HashTool.NativeCrypto;

public sealed partial class BLAKE2s256 : IHasher
{
    private sealed class BLAKE2s256Handle : HasherHandle
    {
        protected override void Free() => blake2s256_free(handle);
    }

    private readonly BLAKE2s256Handle _handle = blake2s256_new();

    public int HashLengthInBytes => 32;

    public void Reset() => blake2s256_reset(_handle);

    public void Append(ReadOnlySpan<byte> source) => blake2s256_update(_handle, source, source.Length);

    public byte[] GetCurrentHash()
    {
        var ret = new byte[32];
        blake2s256_finalize(_handle, ret, 32);
        return ret;
    }

    [LibraryImport("native_crypto", EntryPoint = "blake2s256_new")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial BLAKE2s256Handle blake2s256_new();

    [LibraryImport("native_crypto", EntryPoint = "blake2s256_reset")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void blake2s256_reset(BLAKE2s256Handle hasherHandle);

    [LibraryImport("native_crypto", EntryPoint = "blake2s256_update")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void blake2s256_update(BLAKE2s256Handle hasherHandle, ReadOnlySpan<byte> input, int size);

    [LibraryImport("native_crypto", EntryPoint = "blake2s256_finalize")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void blake2s256_finalize(BLAKE2s256Handle hasherHandle, Span<byte> output, int size);

    [LibraryImport("native_crypto", EntryPoint = "blake2s256_free")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void blake2s256_free(nint hasherPtr);
}

#endif
