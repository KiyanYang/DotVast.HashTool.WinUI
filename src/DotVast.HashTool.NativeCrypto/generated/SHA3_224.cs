// <auto-generated/>

#if Benchmark || sha3

using DotVast.Hashing;

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace DotVast.HashTool.NativeCrypto;

public sealed partial class SHA3_224 : IHasher
{
    private sealed class SHA3_224Handle : HasherHandle
    {
        protected override void Free() => sha3_224_free(handle);
    }

    private readonly SHA3_224Handle _handle = sha3_224_new();

    public int HashLengthInBytes => 28;

    public void Reset() => sha3_224_reset(_handle);

    public void Append(ReadOnlySpan<byte> source) => sha3_224_update(_handle, source, source.Length);

    public byte[] GetCurrentHash()
    {
        var ret = new byte[28];
        sha3_224_finalize(_handle, ret, 28);
        return ret;
    }

    [LibraryImport("native_crypto", EntryPoint = "sha3_224_new")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial SHA3_224Handle sha3_224_new();

    [LibraryImport("native_crypto", EntryPoint = "sha3_224_reset")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha3_224_reset(SHA3_224Handle hasherHandle);

    [LibraryImport("native_crypto", EntryPoint = "sha3_224_update")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha3_224_update(SHA3_224Handle hasherHandle, ReadOnlySpan<byte> input, int size);

    [LibraryImport("native_crypto", EntryPoint = "sha3_224_finalize")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha3_224_finalize(SHA3_224Handle hasherHandle, Span<byte> output, int size);

    [LibraryImport("native_crypto", EntryPoint = "sha3_224_free")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void sha3_224_free(nint hasherPtr);
}

#endif
