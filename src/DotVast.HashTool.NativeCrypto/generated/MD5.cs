// <auto-generated/>

#if Benchmark || md5

using DotVast.Hashing;

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace DotVast.HashTool.NativeCrypto;

public sealed partial class MD5 : IHasher
{
    private sealed class MD5Handle : HasherHandle
    {
        protected override void Free() => md5_free(handle);
    }

    private readonly MD5Handle _handle = md5_new();

    public int HashLengthInBytes => 16;

    public void Reset() => md5_reset(_handle);

    public void Append(ReadOnlySpan<byte> source) => md5_update(_handle, source, source.Length);

    public byte[] Finalize()
    {
        var ret = new byte[16];
        md5_finalize(_handle, ret, 16);
        return ret;
    }

    [LibraryImport("native_crypto", EntryPoint = "md5_new")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial MD5Handle md5_new();

    [LibraryImport("native_crypto", EntryPoint = "md5_reset")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void md5_reset(MD5Handle hasherHandle);

    [LibraryImport("native_crypto", EntryPoint = "md5_update")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void md5_update(MD5Handle hasherHandle, ReadOnlySpan<byte> input, int size);

    [LibraryImport("native_crypto", EntryPoint = "md5_finalize")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void md5_finalize(MD5Handle hasherHandle, Span<byte> output, int size);

    [LibraryImport("native_crypto", EntryPoint = "md5_free")]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    private static partial void md5_free(nint hasherPtr);
}

#endif
